React Native Tutorial
---------------------

Link:
https://www.youtube.com/watch?v=LWs6dY92_MU&list=PL8kfZyp--gEXs4YsSLtB3KqDtdOFHMjWZ&index=3

Tutorial 1: Introduction
----------
React native is build on top on javascript.
It is used to build android, ios and web apps
React native will convert UI code to web, android or ios
Mostly the UI related will be written in UI native component and logic will be written in javascript


Tutorial 2: Setup and Creating first app with expo
---------------

Go to https://reactnative.dev/
Click getting started
Click on environment setup -> Setting up the development environment
It gives two option to install 1. Expo cli 2. React native cli

Expo cli vs react native cli

Expo cli:
1. Its is free third party's one
2. Easy to setup and run
3. Native feature wont be available.
4. Mostly for starting android and ios
5. Less control. We wont have more control on it

React native cli:
1. Its native cli
2. Complex to setup and run
3. Its a native feature
4. Can write own code to start for android and ios
5. Has more control. We have all the control of this


Go to https://expo.dev/
We can check the sample code and its look in main page.
we can select web or android or ios or my device to show the preview
To run in our own device, we need to install expo from play store or app store.
Scan the QR code which is shown in expo portal


Installation:
Install recent node js from https://nodejs.org/en/download/
Give below command to check whether node js is installed or not
node -v
npm -v

We can use any IDE. Mostly the visual studio code would be better.

To install expo, use any one of the below command:
npm install -g expo-cli
or
yarn global add expo-cli


To create first project using expo use below command:
expo init projectname
Eg:
expo init myfirstapp

//we can select blank if we want to create with blank project. 
Project will be created.
Project will be created by default with yarn.
yarn start - will used to open the expo page. There we can choose what is required
yarn android - It will run on android
yarn ios - It will run on ios
yarn web - It will run on web


Use below command to go inside the created project:
cd projectname
Eg:
cd myfirstapp

Use below command to run the project:
yarn start

//This will show the QR code and also opens the expo in browser.
There also we can see the QR code. We can select the QR code in expo app to run on the device.
The web portal also shows, which portal we wanted to run. android or ios or web etc. we can select that


To change content:
Go to App.js file
Change the content and see whether it is reflecting or not



Tutorial 3: Create native app with react cli and ejecting expo project
-----------------------
react naticel cli project will have more feature and control when compare to expo project

Go to https://reactnative.dev/
Click Get started
Click environment setup
Select React native quick start
Select development os (PC OS)
Select Target os (mobile os)       //ios will be supported only in mac os


Follow the instruction given in documentation
Install node js, java and setup the environment variable for java
Node version should be 10 or higher
jdk version should be 8 or higher


Install android studio and setup the environment variable for android sdk
Install latest version of android studio. 
Open android studio, go to sdk manager
Select show package details   //Here we can see the android version
Go to sdk tool tab, we can see the installed sdk tool version. Make sure package and sdk tool version are installed for same version
Add ANDROID_HOME environment variable for sdk path
Add ANDROID_PTOOLS enviroment variable for platform tools path

//if we previously installed react-native-cli package, then we need to remove that as it might cause some unexpected issue


Go to folder where we wanted to create new project
Use below command to create new project
npx react-native init Projectname
npx react-native init MyFirstProject
//This will create the project with default dependencies
Go inside the project using cd command
cd MyFirstProject

We can use physical device or emulator device


Make sure virtualization is enabled in system.

Open android studio, Open AVD manager
Here we can see list of emulator, if not there we can create new one by giving required details.
After adding the emulator, we can launch the emulator
Wait for emulator to fully up
If we face any problem in AVD manager, then go to SDK manager and check whether emulator accelator is installed or not


Use below command to build the project
npx react-native start


Open one more terminal and 
Use below command to install and run the apk 
npx react-native run-android
//This will run the app in emulator/device
//we can see the app will lauching a
//now we can edit the content to check whether edited content is reflecting or not

Thats it



Converting expo project to react native project:

Go to the root of the project.
Eg:
cd MyFirstProject

Run below command to eject from expo and show react native project
Eg:
npm run eject  
//it will asks few details, give required details
//if we eject in mac system, we will have android and ios package. 
// if we eject in windows or linux system, then we will have only android package

Give below command to run in device/emulator
npx react-native run-android
//This will run the app in device/emulator

Thats it




Tutorial 4: VS code for react native
------------------------------------
This video is related to usefull plugins for react native projects in visual studio code and basics of visual studio code IDE
we can type vs code download in google and select the official link to download vs code
We can use ctrl/command + = to zoom in and ctrl/command + - to zoomout
We can change the IDE theme/color in File -> Preferencess -> color theme 
We can click on extension to install any exta plugins


Below are the plugins
material icon theme - this will give different icon for each file type extension etc
react native snippets - this will used for react native applications. helps in auto completion and more
react native tools - This will help to run or debug react native application in vs code
color highlights - This will help to show colors. even in ccs if we use color related code, it will highligt the same color
Bracket pair colorizer - this will helps to show color for brace, where the brace of the class/method started and end
npm intelligence - this will help regarding npm. Eg: auto completion of node/npm related code etc
git lens - this will help to manage the project git repo in vs code
alt + shift + F - this will help to format the alignment of code
File->auto save - this will help to save the code automatically
view->show minimap - this will show all code in mini dialog. used for scrolling the code if there are more lines
We can click on left explorer icon for more space for coding
Terminal -> new terminal - to show the new terminal. for switching different terminal we can select in below
We can click on search icon in left - to search or replace the text - using ctrl + shift + F
clicking on one file, will show the content in tab
double clicking the file will open another tab
view->appearance -> full screen/zen mode - this is for giving more space for coding




Tutorial 5: structure and basics of react native project
--------------------
Create a fresh react native project using command


Below are the files/folders and its purpose:
__tests__ - this folder will contains all unit test class. by default, it will have only one, we can add that later
android - this folder has files and folder related to android app. if we created the project with expo, instead of android/ios, it will have expo folder
ios - this folder has files and folder related to ios app.  if we created the project with expo, instead of android/ios, it will have expo folder
node_modules - this folder has all packages related to node and react native
App.js - this is the main file. this has base of the project. This is important file. This is responsible for showing something on the screen
app.json - this file has name and display name of the app. This will contain the configuration of the app
index.js - this is the start file of the project. this will call App.js and app.json etc
package.json - this will have the dependencies and scripts for starting and others etc. When installing node modele, name and version will be saved here



to add commands we can use like below
/* my commands */


For every change the app will refresh automatically.
we can press r key for manually refresh
we can press d key for opening developer options


Lets press the d key to open developer options
Below are options in developers options
Reload - this is to reload the app
Debug - this is to debug the project
Change bundle location - it is to change bundle location. no need to use as of now
Toggle inspector - this is used to inspect each element in screen
Disable fast refresh - here we can enable or disable auto refresh if any changes in code
Enable sampling profiler - not need to use as of now
Show perf monitor - This will show few perf monitoring of the app in device 
Settings - This is for debugging and performance
If we are using real device, we can open the developer menu by shaking the device



Below are few details about the code in App.js

we can see, it will import "react" and component of "react-native"
and there are other component which will be imported from other module

Modify below line:
const App: () => React$Node = () => {    //old
to:
const App = () => {      //modified       //Here App is like html

const styles = StyleSheet.create({   //This is like css

export default App;   //Finally App will be exported


Below are few tags and its purpose:
<StatusBar>  - It controls the status bar of the device (Top most bar of the device)
<SafeAreaView> - It is like body of the page
<ScrollView>  - It is for creating the scrollable content/page
<View> - It is simular to div. 
<Text> - This is for adding the text

<Button> - this is for adding button. We need to give title and onPress
Eg:
<Button title="My Youtube channel" onPress={ () => {Linking.openURL('http://youtube.com/fdhkah-dfk')} }></Button>
//Here the button will be disabled as "My Youtube channel". When pressingthe button, it will open the youtube in browser or youtube app


Other options:
onPress - This specifies, When pressing that element what should do


Sometime the content wont be directly available in same file, it might in other file, it will be imported and added here
Eg: LearnMoreLinks

//In few tags we can see, it will calls the styles sheet Eg: <View style={styles.myview}> 

We can modify the content as per our need



Tutorial 6: Purpose of useState() function
-------------------------------------------


UseState can be used for setting the variable that can be changable in same page
const [variableName, setVariableName] = useState['defaultvalue']
Eg:
const [name, setName] = useState('Ramu')

To change or set the new name we use setName here
To access or read the name we use name here

Example:

const App = () => {

  const [name, setName] = useState('Raja')
  const [student, setStudent] = useState({sname: 'Aman', sage: 26})
  const [male, isMale] = useState(true)

  const changeName = () => {
    setName('Shuraj')
  }

  const changeStudentDetail = () => {
    setStudent({sname: 'Bala', sage: 31})
  }

  const changeNameAndGender = () => {
    setName('Shuraj')
    isMale(false)
  }

  return (
    <View style={styles.body}>
      <Text style={styles.maintext}> Hi {name}</Text>
      <Button title="Change name" onPress={changeName}></Button>
      <Text style={styles.maintext}> Student name is {student.sname} and age is {student.sage}</Text>
      <Button title="Change student" onPress={changeStudentDetail}></Button>
      <Text style={styles.maintext}> {name} gender is {male? "Male" : "Female"} </Text>
      <Button title="Change name and gender" onPress={changeNameAndGender}></Button>
    </View>
  );
};



Tutorial 7: Styles and style sheet
----------------------------------
styles are used to style the page.
styles in react native is very simular to css in html
we can add style in inline or using StyleSheet

Example of style in inline:
<View style={{
	flex: 1,
	backgroundcolor: "#232890"
}}>



Example of StyleSheet:
<View style={styles.mybody}>

const styles = StyleSheet.create({
	mybody: {
	flex: 1,
	backgroundcolor: "#897711"
	},
	text: {
	color: "#901122"
	}
})


changing the any params or value in style will reflect in UI.
Each component will accept certain style properties. Some wont accepts others style properties.
Go reactnative.dev -> component
Go to basic component and select the component which we want to check what are style properties available
Search for style in page. Click on view style or text style or props which shows
This will show what are the style properties available for the selected components.
By this way we can check what the stype properties support for each UI components

While writing the stype properties it will show suggessted or available stype properties.
If it not shows we can click ctrl+space to show the matching one for typed text

width and height we can use in two mode. pixel as below or percentage as next below
Eg:
width: 240,
height: 340   //This will take in pixel

or
width: '100%',
height: '50%'     //This will take in percentage



Below are few style properties. There are much more.

width: '100%'    //To give the width

height: '70%'    //To give the height

backgroundColor: "#ffffff"    //To give background color

alignItems: 'center'    //To align the item in center

justifyContent: 'center'

borderWidth: 10      //To give the border width

borderColor: "#786100"   //To give the border color

borderRadius: 10       //To give the border radius at cornor

fontSize: 40          //To give font size

fontStyle: 'italic'    //To give font style

margin: 10           //To give margin size. What should be space give between element and other element

textTransform: 'uppercase'    //To give the text to be upper or lowercase


//There are more. few will work only for specific component. So always look into the reactnative.dev -> components -> any basic components -> style 


StyleSheet:
In Below link you can find all properties of StyleSheet
reactnative.dev -> components -> select StyleSheet in basic components

We can use create() method to create style object

compose() and flatten() is to combine two or more stylesheet objects //If it has same property, style in second param will override style in first param


Example of composite:
import React from 'react';
import { StyleSheet, Text, View } from 'react-native';

const App = () => (
  <View style={container}>
    <Text style={text}>React Native</Text>
  </View>
);

const page = StyleSheet.create({
  container: {
    flex: 1,
    padding: 24,
    backgroundColor: '#fff',
  },
  text: {
    fontSize: 20,
    color: '#000'
  },
});

const lists = StyleSheet.create({
  listContainer: {
    flex: 1,
    backgroundColor: '#61dafb',
  },
  listItem: {
    fontStyle: 'italic',
    fontWeight: 'bold'
  },
});

const container = StyleSheet.compose(page.container, lists.listContainer);
const text = StyleSheet.compose(page.text, lists.listItem);

export default App;




Tutorial 8: Flex
-----------------

flex - This is used to give ratio of each element. If there is only one element and its value is one. Then it will take full page or full width and height
flexDirection - this is used to align in colum wise or row wise
alignItems - used to align horizontally
justifyContent - Used to align vertically


flex: 1   //default is full page

lexDirection: "column"   //Add each element below

alignItems: "center"    //horizontally center

justifyContent "center" //vertically center


flex //will take the size as ratio

flex: 2
flex: 3
//item with flex 2 and flex 3 will have the size with ratio of 2 and 3

flexDirection: "column"   //content will be added below
flexDirection: "row"    //content will be added right side
flexDirection: "column-reverse"   //content will be added below and order of contents will be reversed
flexDirection: "row-reverse"    //content will be added right side

//Justify is related to vertical alignment
justifyContent: 'flex-start'  //Keep all content in top
justifyContent: 'flex-end'   //Keep all content in bottom
justifyContent: 'center'   //Keep the content in center
justifyContent: 'space-between' //Has even space between each content. But in top and bottom it wont have any space
justifyContent: 'space-evenly' //Has even space between each content. Has same space in top and bottom and then star the element
justifyContent: 'space-around' //There will be equal spaces in each content. But it will add double spaces between content. Eg: each content will be added along with up and down space

//alignItems is related to horizontal alignment
alignItems: "center" //Keep the content in center
alignItems: "flex-start"  //Keep the content in right side
alignItems: "flex-end"    //Keep the content in left side
lignItems: "stretch"  //stretch the content in full length 



------


Tutorial 9: List, ScrollView and Refresh control
----------------------
<ScrollView>  - This will be used to add scroll. Just we can directly add

<ScrollView horizontal={true}>  - This is scroll horizontally if it is true


View of each list should have key which should be unique. If it has duplicate, then it will give warning or error.
List of item should have along with key.
 <View key={object.key}>  //like this.


 we can use refreshControl to refresh the list in the scroll
 refreshControl={<RefreshControl refreshing = {false} onRefresh={refrest}}  //here refrest is our custom function




 Example:

 /**
 * Sample React Native App
 * https://github.com/facebook/react-native
 *
 * @format
 * @flow strict-local
 */

import React, { useState } from 'react';
import {
  RefreshControl,
  ScrollView,
  StyleSheet,
  Text,
  View,
} from 'react-native';

const App = () => {

  const [items, setItems] = useState([
    {key: 1, item: "item 1"},
    {key: 2, item: "item 2"},
    {key: 3, item: "item 3"},
    {key: 4, item: "item 4"},
    {key: 5, item: "item 5"},
    {key: 6, item: "item 6"},
    {key: 7, item: "item 7"},
    {key: 8, item: "item 8"},
    {key: 9, item: "item 9"},
    {key: 10, item: "item 10"},
    {key: 11, item: "item 11"},
    {key: 12, item: "item 12"},
    {key: 13, item: "item 13"},
    {key: 14, item: "item 14"},
    {key: 15, item: "item 15"},
    {key: 16, item: "item 16"},
    {key: 17, item: "item 17"}
  ])
  const [isRefreshing, setIsRefreshing] = useState(false)

  const refrest = () => {
    setIsRefreshing(true);
    let addlen = items.length + 1
    setItems([...items, {key: addlen, item: "item " + addlen}])
    setIsRefreshing(false);
  }

  return (
      <ScrollView horizontal={false} style={styles.mainView} refreshControl={<RefreshControl refreshing = {isRefreshing} onRefresh={refrest}  color={["#782556"]} />}>
      {
        items.map((object) => {
          return (
            <View style={styles.llview} key={object.key}>
              <Text style={styles.tt}>{object.item}</Text>
            </View>
          )
        })
      }
      </ScrollView>
  );
};

const styles = StyleSheet.create({
  mainView: {
    flex: 1,
    backgroundColor: "#110089",
   
  },
  llview: {
    backgroundColor: "#907611",
    margin: 20
  },
  tt: {
    fontSize: 36
  }
})


export default App;


----


Tutorial 10: FlatList and SectionList
---
FlatList:
Using large list in ScrollView will cause some problem.
In that case we will use FlatList. This will also scroll
FlatList only accept key as string
list should be passed in data Eg: data={items}
We can use index as key. But we should change to string Eg: keyExtractor={(item, index) => index.toString()}
if we wanted to splits in columns in the list use Eg: numColumns={3}. Here we can give number of column required
To view horizontally we can use horizontal. We cannot use horizontal and numColumns at same time
To reverse the list we can use inverted
We can use renderItem to render each list
For refreshing we can use refreshControl

SectionList:
This is used when there is list inside the list (Nested list).
we should give data in sections Eg: sections={myNestedList}
We can use keyExtractor to give key with index Eg: keyExtractor={(item, index) => index.toString()}
We use renderItem to render each nested list and we use renderSectionHeader to show the parent level fields
Each object in nested array should have data. If data is not there, it wont work
Eg:
const myNestedList = [
    {
      title: "title 1",
      data: ["1 item 1", "1 item 2", "1 item 3"]
    },
    {
      title: "title 2",
      data: ["2 item 1", "2 item 2", "2 item 3"]
    },
    {
      title: "title 3",
      data: ["3 item 1", "3 item 2", "3 item 3"]
    },
    {
      title: "title 4",
      data: ["4 item 1", "4 item 2", "4 item 3"]
    }
  ]

  Check example to see full code
  
  
  
  ----
  
  
  Tutorial 11: TextInput and Keyboard
---------------------------------
TextInput:
This is used to give text input
Below are few properties of TextInput field
placeholder - This is to add placeholder
multiline - This is to add multiple lines
keyboardType - This is to define which keyboard it should use for this input.
maxLength - this is to add maximum number of character allowed
editable - Whether it can be editable or not. By default it is true
secureTextEntry - This wont show the text. shows dot. Used for password field

We can see all its properties in document




------------


Tutorial 12: Button, TouchableOpacity, TouchableHighlight, TouchableWithoutFeedback,Pressable
-----------------------------------
Button:
title - this is mandatory. This will be shown
onPress - this is to define what to do when button was pressed. We can call other function or we can write inline function
disabled - This is used to disable the button pressing
color - this is used to add button color
Button has only few properties and few stying. So we use other component like below


TouchableOpacity:
This is not the button. But we can use them like a button using style
We can add Text tag inside ToubleOpacity to act like name of the button
onPress - this is call other function 
We can add more styles and customise to look like button
We can add width, height, alignItems and background color to look like button
activeOpacity - This is make the button grey on time of pressing. Default value is 0.2 of the opacity. We can give from 0.1 to 1.0


TouchableHighlight:
This will high light, when it was pressed
underlayColor - this is specity color when pressing happens


TouchableWithoutFeedback:
This wont show any feedback(change style) when pressed. 
End user cannot see when it was clicked
But we can still add View tag inside if required


Pressable:
This the new component for button. Has more features
We can add Text tag to add button name
onPress - We can onPress if we want to call any function when pressing
onLongPress - we can call any function when there is long press
delayLongPress - This is to change the default value of long press. Default value is 500 whichi is in mill sec. We can give like 2000, if we need 2 sec as long press. Eg: delayLongPress = {2000}
hitSlop - used to provide addition size of this button. Eg: hitSlop={{top: 20, bottom: 20, right: 20, left: 20}}
disabled - this is to disable
android_ripple - this will give grafical ripple effect for this button when click. This is only for android. Eg: android_ripple={{color:"#782366"}}
This Pressable has more feature compare to other.


------------

Tutorial 13: Alert and Toast message
-------------------------------
Alert:
Alert.alert() - this is used to display the alert message
Alert.alert() - This accept four parameter. Title of alert, message, array of buttons and options
android can show only 3 button in alert
ios can have n number of button in alert
We can have onPress for each button to call function
By default one button should be clicked for alert to be removed
{cancelable: true} - this can be used to remove if user press outside. we can have onDismiss to call any function


ToastAndroid:
Toast messasge is only for android
ToastAndroid.show() - Here we will give message of the toast and duration
ToastAndroid.showWithGravity() - Here we will give message of the toast, duration and location of the toast message
ToastAndroid.showWithGravityAndOffset() - - Here we will give message of the toast, duration, location of the toast message and bottom and left offset. So that we can control the location
Duration will be given as ToastAndroid.SHORT, ToastAndroid.LONG. 2 sec or 3 sec respectively
Location will be given as ToastAndroid.TOP, ToastAndroid.CENTER, ToastAndroid.BOTTOM

----

Tutorial 14: Modal & Custom alert message
-----------------------------------------
Using Moday we can create custom pop alert
visible - Using this we can control whether to disable the modal or not. By make this true and false we can control to show the popup or not Eg: visible={true}
onRequestClose - This is to close the modal view when clicking back button
we can add View, Text or any other tag inside modal. with style we can modify and create custom alert
transparent - This is to add transparent view. 
hardwareAccelerated - to increase performance in android. 
We can add transparent value at end of the color value Eg: backgroundColor: "#56118299" //here 99 is the transparent value for the given color
We can add few style like width, borderRadius to make it better
we can add different Text in different view for title, message of the custom alert
For button we can use Pressable and make the visibility false of Modal if needed
animationType - to add the animation when opens Eg: animationType='fade'

------

Tutorial 15: Image and ImageBackground
--------------------------------------
Image - We can use Image tag to show the image
source - to give the location of image Eg: source={require('./asserts/error.png')}
resizeMode - To resize the image with inbuild values. Eg: resizeMode='stretch' //This will resize with fitted value
it support jpeg, png, gif and many more
source - to give the location of url Eg: source={{uri:'https://drive.s3.amazon.aws/images/hhkhjd.jpeg'}}
we need internet if we give the image of url. We can handle with our own logic to show default image if not internet
blurRadius - This is to blur the image Eg: blurRadius={3}
ImageBackground - We can use ImageBackground tag to show the image in background

-----


Tutorial 16: Custom components(custom tags) and Props
--------------------------------------
We can add our own tags like below
Here MyBut, MyButTwo and MyButThree will act as tag.
We can use like <MyBut> etc
The function should accept props. This has all properties.
we can add props.anynamehere. We can pass that anynamehere from where we are using.
props.children can be used to for reading the text between. Eg: <MyBut>mytext<MyBut>>   //Here mytext will be read via props.childer.
For more details refer example



Eg:
Eg: to create tag:
import React from "react";
import { Button } from "react-native";

const MyBut = (props) => {
    return(
     <Button
        title={props.name}
        onPress={props.myOnPress}
        color={props.backColor}
    >
    </Button>
    )
}

export default MyBut;


Eg: To use tag:
<MyBut myOnPress={myOnPressHander} name="login" backColor="#656"></MyBut>


-----

Tutorial 17: React navigation V5 - Stack navigation
---------------------------------------------
When we go to Screen A, then Screen B and then Screen C. Now current screen is C and Screen B still exists behind Screen C and Screen A still exists behind Screen B.
To install use below commands. Refere link: https://reactnavigation.org/docs/getting-started
npm install @react-navigation/native
//This will install react navigation components
Install react-navigation dependencies using below commands. From this link, we can get recent below commands: https://reactnavigation.org/docs/getting-started
npm install react-native-screens react-native-safe-area-context
Install stack using below command. From this link we can take this command. https://reactnavigation.org/docs/stack-navigator
npm install @react-navigation/stack
NavigationContainer - This tag will be used for handling navigation in top level. Handle linking of pages, stage change, system back button etc
Create Stack from createStackNavigation().
Eg:
const Stack = createStackNavigation()
Stack.Navigator - This navigator
Stack.Screen - This tag is to specify the screen
name in Stack.Screen - name of the screen. Name will show in top as header. We can delete this by adding property options={{header: () => null}} in Stack.Screen
component in Stack.Screen - Here we will call the function which takes navigation as argument and will returns screen page/code . navigation can be as argument or the navigation can come from useNavigation Eg: const navigation = useNavigation(); 
By default, it will add the backbutton if we to next next page
navigation.navigate("screennamehere") - using this we can navigate to any screen
navigation.goBack()  - using this we can navigate to previous screen
navigation.replace("screennamehere") - using this, it will replace older parent screen with the page we are giving. That page will be come the parent page. So we can cannot use back button to go back. Because that session will expire and replaced with new page. This will remove default backbutton as this page become current parent page also the navigation.goBack() will also not work as this become current page
screenOptions - this will be used to modify few in properties in parent level/Stack.Navigator. Eg: screenOptions={{header: () => null}} - this will remove header in all pages. if that not works, you can use screenOptions={{headerShown: false}} Eg: <Stack.Navigator screenOptions={{headerShown: false}}>

//if you face any issue. install below
npm install react-native-gesture-handler --save


-----


Tutorial 18: React Navigation - Tab Navigator - Material Tab at Bottom & Top
--------------------------------------------------------

BottomTabNavigator:

install bottom tab using below commands //Refer https://reactnavigation.org/docs/tab-based-navigation/
npm install @react-navigation/bottom-tabs

use const Tab = createBottomTabNavigator();  // createBottomTabNavigator - this used to create navigation tab in bottom

use tab instead of stack // Tab.Navigator and Tab.Screen
Here the tab will be created at the bottom of the page
options={{headerShown: false}} - this is disable the header


We can use icon for each tab using image or other.
Eg: we can use react-native-vector-icons for adding icons/images. we can customize the icon if needed

Refer https://github.com/oblador/react-native-vector-icons and https://oblador.github.io/react-native-vector-icons for more details 

install with below command
npm install --save react-native-vector-icons

We have to add below line in android/app/build.gradle
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"

use below two command to sync in android
cd android
./gradlew clean

go back and run the app
cd ..
npm run android


Below we can see how to add tab and different options and uses etc. 


<NavigationContainer>
      <Tab.Navigator
      screenOptions={({route}) => ({
        tabBarIcon: ({focused, size, color}) => {
          let iconName;
          if(route.name==='Screen_A'){
            iconName='cloud' //refer https://oblador.github.io/react-native-vector-icons for icon name
            size = focused ? 30 : 20; //this is for changing the size of icon when focused/clicked
            color = focused ? "#F0F" : "#888"; //This is to change the color when focused/clicked
          }else if(route.name==='Screen_B'){
            iconName='star'
            size = focused ? 30 : 20;
            color = focused ? "#F0F" : "#888";
          }
          return (
            <FontAwesome5
              name={iconName} //Here we are giving the icon name
              size={size}  //Here we are giving the size of the icon
              //color={color}  //Here we are giving the color of the icon
            />
          )
        }
      })}
      tabBarOptions={{ //Currently tabBarOptions is deprecated.
        activeTintColor: "#0F2", //to color active tab label
        inactiveTintColor: "#F87", //to color inactive tab label
        activeBackgroundColor: "#117733", //To add background color of the tab which is active
        inactiveBackgroundColor: "#667788", //To add background color of the tab which is inactive
        showLabel: true,   //To enable or disable the label of the tab
        labelStyle: {fontSize: 17}  //To style the label of the tab
      }}
      >
        <Tab.Screen name="Screen_A" component={ScreenA} 
        options={{tabBarBadge: 3}} //This is for adding batch in button/icon. Eg: this number will show in top of the icon and highlighted. We can use dynamic value by passing as variable
        //options={{headerShown: false}} //This is disable header
        />
        <Tab.Screen name="Screen_B" component={ScreenB} 
        //options={{headerShown: true}}
        />
      </Tab.Navigator>
    </NavigationContainer>





MaterialBottomTabNavigator:   

With MaterialBottomTabNavigator we can have more animation
//refer https://reactnavigation.org/docs/material-bottom-tab-navigator/


Install the package using below commands
npm install @react-navigation/material-bottom-tabs react-native-paper react-native-vector-icons

const Tab = createMaterialBottomTabNavigator(); //here we are using createMaterialBottomTabNavigator.

We can use below three properties also in Tab.Navigator
activeColor - to add color for active tab. Eg: activeColor="#FF9210"
inactiveColor - to add color for inactive tab. Eg: inactiveColor="#888888"
barStyle - to add style Eg: barStyle={{backgroundColor: "#552352"}}   
And more are available




MaterialTopTabNavigator:

This will be used to add tab at the top of the page
//refer https://reactnavigation.org/docs/material-top-tab-navigator/

Install the packge using below command
npm install @react-navigation/material-top-tabs react-native-tab-view

const Tab = createMaterialTopTabNavigator(); //here we are using createMaterialTopTabNavigator()

rerun the app and check
npm run android

//if any error is there, you can install below
npm i react-native-pager-view




//All these navigator will have simular navigate options to navigate. That will be same


-----


Tutorial 19: React navigation - Drawer navigation - side menu
-----------------------------------------------------------
Drawer is also called as side menu
This will show hambager menu and its screen name as options. 
By defaut, first screen will be shown
We can press that options to navigating between screens
or we can swipe left to right to show the menu

To install its dependencies use below command. Refer https://reactnavigation.org/docs/drawer-based-navigation/
npm install @react-navigation/drawer

Run the app again to use this dependencies
Create its object from createDrawerNavigator()
Eg:
const Drawer = createDrawerNavigator();      //it will be imported from @react-navigation/drawer
We can give <Drawer.Navigator> and <Drawer.Screen> instead of other


Properties of Drawer.Navigator:
initialRouteName - using initialRouteName in Drawer.Navigator we can specify what should be the initial page. Eg: initialRouteName="Screen_B". By default it will take the first screen as initial page
IMPORTANT: if below properties is not working directly, you can give the same inside screenOptions. Refer example
drawerPosition - to specify whether the slide should come from left or right side Eg: drawerPosition="right" - This will move the slide menu in right. By default it will be in left side
drawerType - This is to specify the type.  drawerType="back" - Here the slide will be in behind the main screen and this will move the main window and show. "slide" - this will be right to main screen and this will also move the main window and show. "permanent" - this cannot be moved and it will be fixed. "front" - this is the default mode this will open the slide in front of main screen
edgeWidth or swipeEdgeWidth - here we can specify from where we can start swipe. Eg: edgeWidth={500} - as this is given 500, we can spice from middle to right, that also will open the slide. no need from start of left to right
hideStatusBar={true} or drawerHideStatusBarOnOpen: true - this is hide the status bar of the mobile. Status bar is the area where it shows battery and other detail in top
overlayColor - This is to specify the color of behind main area. Color will go from 0 to given value in transparent mode to main Eg: overlayColor="#786711". Eg: overlayColor="#78671190" - this is for color with transparent
IMPORTANT: if above properties are not working, you can give the same inside screenOptions.
screenOptions={{
	headerShown: true,  //This will show the header screen name and hambeger menu option. by default it will be false and it wont show hambeger menu and screen name in header
	swipeEnabled: false //This is used to control and open drawer/slide using swipe. If it is false, then swipe wont work. By default, it will be true and it will open by swipe
	gestureEnabled: false //This is used control removing of slide/drawer by touching outside. Byt defaut it will be true and by touching outside, it will remove the drawer/slide
	headerTitleAlign: 'center' //This is specify the title to show in center or begining or at end
	headerStyle: {
		backgroundColor: "#782367"  //This is to give background color for header
	}
	headerTintColor: "#678233"  //This is to give color of the header text
	headerTitleStyle: {    //This is to change the style of the header title
		fontSize: 25,     //This is to change the font size of header title
		fontWeight: "bold"   //This is give font weight of header title
	}
}}
drawerStyle - this has multiple attribute to change the style of the slide/drawer
Eg:
drawerStyle={{
	backgroundColor: "#e26711",  //This is for giving the background color of the slide
	width: 250,  //This is to give width of the slide. Based on given width it will open the slide

}}




Properties of Drawer.Screen:
name and component property works as same like other.
options={{
	title: "Profile"  //This is to give the name of the option to display. This title will be shown as option in menu instead of above name
	drawerIcon: ({focused}) => (   //This is to give icon/image for the option 
		<FontAwesome5 
			name="btc"   //name of the icon
			size={focused ? 25 : 20 }   //Its for giving the size. focused is used here because, if it is selected, it should be larger and previous size
			color={focused? "#678811" : "232356"}   //Its for giving the color. If focused give one color if not then give other color 
		/>
	)
}}



If need we can give the hambeger menu by ourself and call by below
navigation.openDrawer()   //this is to open the drawer/slide menu
navigation.closeDrawer()   //This is to close the drawer/slide menu
navigation.toggleDrawer()   //This is to to both operation. if open it will close. if close, it will open

-------






Notes:
------
------

expo build:android     //This is to create apk and save to expo site

adb install file.apk    //This is to install apk in connected device using adb command


npm run eject  //This will create folder seperately for android/ios 


react-native bundle --platform android --dev false --entry-file index.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res
//This command is to build the bundle

cd android


./gradlew assembleDebug



react-native run-android      //This command will be used to run the app
or
npm run android //we can use this command also. Because in script, it will still call react-native run-android command








